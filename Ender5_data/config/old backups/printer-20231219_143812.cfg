[include shell_command.cfg]
# Mainsail settings
[include mainsail.cfg]

#[timelapse]

[respond]



# This file contains pin mappings for the stock 2020 Creality Ender 5.
# To use this config, during "make menuconfig" select the STM32F103
# with a "28KiB bootloader" and serial (on USART1 PA10/PA9)
# communication.

# Because this printer has factory wiring, mounts, and firmware for
# a BLTouch, but does not ship with one at this time, default values
# for the sensor have been specified, but disabled, in anticipation of
# future revisions or user modification. User should take care to
# customize the offsets, particularly z-offset, for their specific unit.

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

# See docs/Config_Reference.md for a description of parameters.
# moonraker.conf


[virtual_sdcard] 
path: /home/pi/Ender5_data/gcodes
	
[display_status]

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 39.60
endstop_pin: ^PA5
position_endstop: 275
position_min: 0
position_max: 280
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 39.48
endstop_pin: ^PA6
position_endstop: 295
position_min: 0
position_max: 300
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 4.02
# position_endstop: 0.0                     # disable to use BLTouch
# endstop_pin: ^PA7                         # disable to use BLTouch
endstop_pin: probe:z_virtual_endstop    # enable to use BLTouch
position_min: -2                        # enable to use BLTouch
position_max: 325

[safe_z_home]                           # enable for BLTouch
home_xy_position: 175.5, 150
#home_xy_position: 50, 50
speed: 100
z_hop: 5
z_hop_speed: 5

[bltouch]                               # enable for BLTouch
sensor_pin: ^PB1
control_pin: PB0
probe_with_touch_mode: False
x_offset: -43
y_offset: -7.0
#z_offset: 1.5
speed: 3.0

[bed_mesh]                              # enable for BLTouch
speed: 110
horizontal_move_z: 5
mesh_min: 15, 35
mesh_max: 225, 280
algorithm: bicubic
probe_count: 7, 7

[extruder]
max_extrude_only_distance: 400000.0
max_extrude_cross_section: 50.0
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 31.855
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 250
min_extrude_temp: 0 
pressure_advance: 0.053

[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 100

[fan]
pin: PA0

[temperature_sensor Enclosure_Sensor]
sensor_type: LM75
#sensor_pin:
min_temp: 0
max_temp: 125
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.
i2c_address: 72
#   Default is 72 (0x48). Normal range is 72-79 (0x48-0x4F) and the 3
#   low bits of the address are configured via pins on the chip
#   (usually with jumpers or hard wired).
i2c_mcu: rpi
#   The name of the micro-controller that the chip is connected to.
#   The default is "mcu".
i2c_bus: i2c.1
#   If the micro-controller supports multiple I2C busses then one may
#   specify the micro-controller bus name here. The default depends on
#   the type of micro-controller.
#i2c_speed:
#   The I2C speed (in Hz) to use when communicating with the device.
#   On some micro-controllers changing this value has no effect. The
#   default is 100000.
lm75_report_time: 0.8 
#   Interval in seconds between readings. Default is 0.8, with minimum
#   0.5.

[temperature_sensor Electronics]
sensor_type: LM75
#sensor_pin:
min_temp: 0
max_temp: 125
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.
i2c_address: 72
#   Default is 72 (0x48). Normal range is 72-79 (0x48-0x4F) and the 3
#   low bits of the address are configured via pins on the chip
#   (usually with jumpers or hard wired).
i2c_mcu: rpi
#   The name of the micro-controller that the chip is connected to.
#   The default is "mcu".
i2c_bus: i2c.0
#   If the micro-controller supports multiple I2C busses then one may
#   specify the micro-controller bus name here. The default depends on
#   the type of micro-controller.
#i2c_speed:
#   The I2C speed (in Hz) to use when communicating with the device.
#   On some micro-controllers changing this value has no effect. The
#   default is 100000.
lm75_report_time: 0.8 
#   Interval in seconds between readings. Default is 0.8, with minimum
#   0.5.

#[temperature_fan Electronics_fan]
#pin: gpiochip0/gpio05  # the fan control pin (must be a mosfet or a pwm fan)
#control: watermark # the type of hysteresis we are using
#max_delta: 3.0 # fan turns on/off at 3Â° over/under target_temp
#sensor_type: LM75 # same as a temp_sensor
#Min_temp: 30 # just the valid temperature ranges
#max_temp: 70 # just the valid temperature ranges
#target_temp: 40.0 # the initial target temperature for the fan


[temperature_sensor RPI_Sensor]
sensor_type: temperature_host
sensor_path: /sys/class/thermal/thermal_zone0/temp
#   The path to temperature system file. The default is
#   "/sys/class/thermal/thermal_zone0/temp" which is the temperature
#   system file on a Raspberry Pi computer.


[filament_switch_sensor Filamemt_Sensor]
switch_pin: !PA4
pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode:
  PAUSE

#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.

[firmware_retraction]
retract_length: 200
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 20
#   The speed of retraction, in mm/s. The default is 20 mm/s.
#unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
#unretract_speed: 10
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[mcu]
serial: /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.4:1.0-port0
restart_method: command

# This file contains an example configuration with RPi as secondary mcu

# See docs/Config_Reference.md for a description of parameters.

# The rpi microcontroller is used as secondary.
# Typically, both the X and Y axes
# are connected to the main micro-controller. The rpi microcontroller is used
# on non time-critical functions such as enclosure sensors, additional fan or
# light sources


[mcu rpi]
serial: /tmp/klipper_host_mcu
###restart_method: rpi_usb


# Example1: A led strip controlled by the GPIO20 on the RPi
#[output_pin caselight]
#pin: host:gpio20
# You can also write the pin in extended form by specifying
# the reference gpiochip.
#pin: host:gpiochip0/gpio20

#[gcode_macro TOGGLE_CASELIGHT]
#gcode:
#  SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}


# Example2: Using the i2c bus of the RPi to read a sensor
#[temperature_sensor enclosure_temp]
#sensor_type: HTU21D
#i2c_mcu: host
#i2c_bus: i2c.1
#htu21d_hold_master: False

#[gcode_macro QUERY_ENCLOSURE]
#gcode:
#    {% set sensor = printer["htu21d enclosure_temp"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
#[fan]
#pin: host:gpiochip2/gpio7

###[adxl345]
###cs_pin: mcu:None

#   The SPI enable pin for the sensor. This parameter must be provided.

#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#spi_bus:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
#axes_map: x, y, z
#   The accelerometer axis for each of the printer's X, Y, and Z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y, x, z" to swap the X and Y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x, z, -y"). The default is "x, y, z".
#rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.
    
#[output_pin caselight]
#pin: host:pwmchip0/pwm0
#pwm: True
#hardware_pwm: True
#cycle_time: 0.000001

###[resonance_tester]
###accel_chip: adxl345
###probe_points: 140, 150, 20  
###accel_per_hz: 75  # default is 75
###max_smoothing: 0.059  # an example

#probe_points:
#   A list of X, Y, Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 120
#   Maximum frequency to test for resonances. The default is 120 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

####[idle_timeout]
######gcode:
# Disable steppers
###    M84
# A list of G-Code commands to execute on an idle timeout. See
# docs/Command_Templates.md for G-Code format. The default is to run
# "TURN_OFF_HEATERS" and "M84".
###  timeout: 1200
# Idle time (in seconds) to wait before running the above G-Code
# commands. The default is 600 seconds.

[printer]
kinematics: cartesian
max_velocity: 150
max_accel: 1500
max_accel_to_decel: 1500
max_z_velocity: 5
max_z_accel: 100

[bed_screws]
screw1:35,35
screw1_name: FrontLeft
screw2:245,35
screw2_name: FrontRight
screw3:35,265
screw3_name: BackLeft
screw4:245,265
screw4_name: BackRight

[screws_tilt_adjust]
screw1:75,35
screw1_name: FrontLeft
screw2:255,35
screw2_name: FrontRight
screw3:75,275
screw3_name: BackLeft
screw4:255,275
screw4_name: BackRight
horizontal_move_z: 10.
speed: 100.
screw_thread: CW-M3

#[input_shaper]
#shaper_freq_x: 82.6  # frequency for the X mark of the test model
#shaper_type_x: mzv
#shaper_freq_y: 58.0  # frequency for the Y mark of the test model
#shaper_type_y: mzv

[gcode_arcs]
resolution: 1.0

#[board_pins]
#aliases:
#  EXP1_1=PC6,EXP1_3=PB10,EXP1_5=PB14,EXP1_7=PB12,EXP1_9=<GND>,
#  EXP1_2=PB2,EXP1_4=PB11,EXP1_6=PB13,EXP1_8=PB15,EXP1_10=<5V>,
#PROBE_IN=PB0,PROBE_OUT=PB1,FIL_RUNOUT=PC6

[display] # RET6 12864 LCD
lcd_type: st7920
cs_pin: PB12
sclk_pin: PB13
sid_pin: PB15
encoder_pins: ^PB14, ^PB10
click_pin: ^!PB2

[output_pin BEEPER_Pin]
pin: PC6
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1


[gcode_macro Beeper]
gcode:
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
    {% set F = 1 %}
    {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
    {% set F = 0 %}
    {% else %}
    {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=BEEPER_Pin VALUE=0



# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isnât an object and shouldnât be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}
  
#---------------------------- Start Print -----------------------------
[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

  # Start bed heating
  M140 S{BED_TEMP}
  # Use absolute coordinates
  G90
  G28 ; Home all axes
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X0.1 Y20 Z30 F5000.0 ; Move to start position
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  G92 E0 ; Reset Extruder
  G1 Z0.3 ; Start close to bed
  G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
  G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
  G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

# --------------------------------------------------------------------


#---------------------------- End Print -----------------------------
[gcode_macro END_PRINT]
gcode:
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Move nozzle away from print while retracting
  G91 ; rel pos
  #G1 X-2 Y-2 E-3 F300
  G1 X-2 Y-2 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  G90 ; absolute pos
  G1 X280 Y300 F3000 ;clear head and bring bed to the front
  # Disable steppers
  M84
  # Print message on LCD
  M117 Print Completed

# --------------------------------------------------------------------


#Moveit
[gcode_macro Move_Get_out_the_way]
gcode: 
    G1 X280 Y300 F3000

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: BASE_PAUSE
gcode:
    CLEAR_PAUSE
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=e0_temp VALUE={printer.extruder.target}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=e1_temp VALUE={printer.extruder1.target}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    PARK_NOZZLE```
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro clean_nozzle]
gcode:
  {% set wipe_count = 8 %}
  SAVE_GCODE_STATE NAME=clean_nozzle_state
  G90
  G0 Z15 F300
  {% for wipe in range(wipe_count) %}
    {% for coordinate in [(275, 4),(235, 4)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000
    {% endfor %}
  {% endfor %}
  RESTORE_GCODE_STATE NAME=clean_nozzle_state

[gcode_macro BED_MESH_CALIBRATE+Save]				#add g29 to the interface
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200
  # save_config
 
[gcode_arcs]
#resolution: 1.0
 

 
[gcode_macro Z_AXIS_CALIBRATE]
gcode:
    G28
    PROBE_CALIBRATE
 
 
 
[gcode_macro PID]
gcode:
    G28
    PID_CALIBRATE HEATER=extruder TARGET=200
    PID_CALIBRATE HEATER=heater_bed TARGET=60
 
[gcode_macro Press_Advance_short]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005
 
[gcode_macro Press_Advance_long]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020



######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 31.769
#*# pid_ki = 2.302
#*# pid_kd = 109.604
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 73.888
#*# pid_ki = 1.250
#*# pid_kd = 1091.688
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.181250, -0.110000, -0.051250, -0.031250, -0.036250, -0.073750, -0.142500
#*# 	-0.091250, -0.050000, -0.071250, -0.036250, -0.028750, -0.067500, -0.062500
#*# 	-0.063750, -0.052500, -0.033750, -0.016250, -0.037500, -0.056250, -0.110000
#*# 	-0.063750, -0.020000, -0.033750, -0.013750, -0.032500, -0.053750, -0.088750
#*# 	-0.070000, -0.038750, -0.038750, -0.026250, -0.056250, -0.067500, -0.120000
#*# 	-0.102500, -0.093750, 0.000000, -0.057500, -0.063750, -0.075000, -0.125000
#*# 	-0.187500, -0.148750, -0.132500, -0.110000, -0.100000, -0.116250, -0.166250
#*# tension = 0.2
#*# min_x = 15.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = 35.0
#*# x_count = 7
#*# max_y = 279.98
#*# mesh_x_pps = 2
#*# max_x = 225.0
#*#
#*# [bltouch]
#*# z_offset = 2.990
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 56.4
#*# shaper_type_y = 3hump_ei
#*# shaper_freq_y = 48.0
#*#
#*# [bed_mesh Fronthigh]
#*# version = 1
#*# points =
#*# 	-0.059044, -0.038944, 0.030150, 0.033919, -0.002512, -0.047737, -0.082912
#*# 	-0.043969, 0.021356, -0.001256, 0.050250, -0.012562, -0.064069, -0.087937
#*# 	0.048994, 0.056531, 0.062813, 0.036431, 0.043969, -0.031406, -0.070350
#*# 	0.032663, 0.036431, 0.048994, 0.020100, 0.046481, -0.012562, -0.070350
#*# 	0.011306, 0.008794, 0.057788, 0.054019, 0.030150, -0.022612, -0.081656
#*# 	-0.060300, -0.045225, -0.013819, -0.025125, -0.020100, -0.052762, -0.103012
#*# 	-0.140700, -0.146981, -0.105525, -0.109294, -0.108037, -0.119344, -0.157031
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 15.0
#*# max_x = 225.0
#*# min_y = 35.0
#*# max_y = 279.98
#*#
#*# [bed_mesh default2]
#*# version = 1
#*# points =
#*# 	  -0.077887, -0.001256, 0.084169, 0.043969, 0.023869, -0.027637, -0.060300
#*# 	  -0.047737, 0.027638, 0.076631, 0.036431, 0.031406, -0.018844, -0.060300
#*# 	  0.071606, 0.060300, 0.075375, 0.050250, 0.021356, -0.020100, -0.065325
#*# 	  -0.021356, -0.003769, 0.022613, -0.013819, -0.012562, -0.055275, -0.094219
#*# 	  -0.013819, -0.021356, -0.001256, -0.021356, -0.025125, -0.064069, -0.108037
#*# 	  -0.087937, -0.095475, -0.061556, -0.075375, -0.060300, -0.096731, -0.140700
#*# 	  -0.182156, -0.184669, -0.141956, -0.144469, -0.134419, -0.152006, -0.190950
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 15.0
#*# max_x = 225.0
#*# min_y = 35.0
#*# max_y = 279.98
